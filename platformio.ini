; PlatformIO Project Configuration File
;
;   Build options: build flags, source filter
;   Upload options: custom upload port, speed and extra flags
;   Library options: dependencies, extra library storages
;   Advanced options: extra scripting
;
; Please visit documentation for the other options and examples
; https://docs.platformio.org/page/projectconf.html

[platformio]
name = LEDThingy
default_envs = lolin_s2_mini, dev

[monitor_settings]
speed = 115200
filters = esp32_exception_decoder, log2file

[env]
framework = arduino
platform = https://github.com/pioarduino/platform-espressif32/releases/download/53.03.11/platform-espressif32.zip
monitor_speed=${monitor_settings.speed}
monitor_filters=${monitor_settings.filters}
build_flags = 
  -D MONITOR_SPEED=${monitor_settings.speed}
  ; Configure app
  -D APP_NAME=\"LEDThingy\"
  -D ESPCONNECT_TIMEOUT_CAPTIVE_PORTAL=180
  -D ESPCONNECT_TIMEOUT_CONNECT=20
  -D CAPTIVE_PORTAL_SSID=\"LEDPortal\"
  -D CAPTIVE_PORTAL_PASSWORD=\"\"
  -D HTTP_PORT=80
  -D HTTPCLIENT_NOSECURE
  -D CONFIG_THINGY_TASKS_RUNNING_CORE=1
  -D CONFIG_THINGY_TASKS_STACK_SIZE=4096
  ; -D MYCILA_LOGGER_SUPPORT
  ; AsyncTCP
  -D CONFIG_ASYNC_TCP_RUNNING_CORE=1
  -D CONFIG_ASYNC_TCP_STACK_SIZE=4096
  ; ESPAsyncWebServer
  -D WS_MAX_QUEUED_MESSAGES=64
  ; TaskScheduler
  -D _TASK_THREAD_SAFE
  -D _TASK_STD_FUNCTION
  -D _TASK_STATUS_REQUEST
  -D _TASK_SELF_DESTRUCT
  ; C++
  -std=c++17
  -std=gnu++17
  ; https://gcc.gnu.org/onlinedocs/gcc/Optimize-Options.html
  -O3
build_unflags =
  -std=gnu++11
lib_deps = 
  bblanchon/ArduinoJson @ 7.3.0
  ESP32Async/AsyncTCP @ ^3.3.5
  ESP32Async/ESPAsyncWebServer @ 3.7.0
  https://github.com/soylentOrange/ESP32Connect.git
  arkhipenko/TaskScheduler @ 3.8.5
  fastled/FastLED @ 3.9.13
lib_compat_mode = strict
lib_ldf_mode = chain
board_build.filesystem = littlefs
board_build.partitions = partitions_safeboot640k_app3264k_fs128k.csv
board_build.app_partition_name = app
custom_safeboot_dir = safeboot
upload_protocol = esptool
board = esp32dev

extra_scripts =
  pre:tools/assets.py
  pre:tools/customize_thingy_html.py
  pre:tools/version.py
  post:tools/factory.py
  post:tools/rename_fw.py

board_build.embed_files =
  .pio/assets/logo_captive.svg.gz
  .pio/assets/logo_thingy.svg.gz
  .pio/assets/logo_safeboot.svg.gz
  .pio/assets/favicon.svg.gz
  .pio/assets/apple-touch-icon.png.gz
  .pio/assets/favicon-96x96.png.gz
  .pio/assets/favicon.ico.gz
  .pio/assets/thingy.html.gz

;  CI

[env:ci]
platform = ${sysenv.PIO_PLATFORM}
board = ${sysenv.PIO_BOARD}

;  DEV

[env:dev]
build_flags = ${env.build_flags}
  ; Debug
  -D CONFIG_ARDUHAL_LOG_COLORS
  -D CORE_DEBUG_LEVEL=ARDUHAL_LOG_LEVEL_DEBUG
  -D ESPCONNECT_DEBUG
  -D THINGY_DEBUG
  -D DEBUG_ESP_CORE

[env:lolin_s2_mini]
board = lolin_s2_mini
build_flags = ${env.build_flags}
  ; Debug
  -D CONFIG_ARDUHAL_LOG_COLORS
  -D CORE_DEBUG_LEVEL=ARDUHAL_LOG_LEVEL_DEBUG
  -D ESPCONNECT_DEBUG
  -D THINGY_DEBUG
  ; -D DEBUG_ESP_CORE

; After initial flashing of the [..].factory.bin, espota can be used for uploading the app
[env:lolin_s2_mini-ota]
board = lolin_s2_mini
upload_protocol = espota
; enter mdns-name of the target here
upload_port = ledthingy.local
extra_scripts = ${env.extra_scripts}
  tools/safeboot_activate.py
build_flags = ${env.build_flags}
  ; Debug
  -D CONFIG_ARDUHAL_LOG_COLORS
  -D CORE_DEBUG_LEVEL=ARDUHAL_LOG_LEVEL_DEBUG
  -D ESPCONNECT_DEBUG
  -D THINGY_DEBUG
  ; -D DEBUG_ESP_CORE

[env:esp32_s3_tiny]
board = waveshare_esp32_s3_tiny
build_flags = ${env.build_flags}
  ; Debug
  -D CONFIG_ARDUHAL_LOG_COLORS
  -D CORE_DEBUG_LEVEL=ARDUHAL_LOG_LEVEL_DEBUG
  -D ESPCONNECT_DEBUG
  -D THINGY_DEBUG
  ; -D DEBUG_ESP_CORE
